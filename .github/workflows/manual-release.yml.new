// filepath: c:\projects\airqo-icon-library-min\.github\workflows\manual-release.yml
name: Manual Release and Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: 'Release type'
        options:
          - patch
          - minor
          - major
        required: true
        default: 'patch'
      dry_run:
        type: boolean
        description: 'Dry run (no actual publishing)'
        required: false
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  id-token: write

jobs:
  release:
    name: Release and Publish
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.0
          run_install: false

      # Explicitly set shell environment variable
      - name: Set shell environment
        run: echo "SHELL=/bin/bash" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Configure Git user
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"

      - name: Generate Icons
        run: pnpm generate

      - name: Fix component types
        run: pnpm fix-component-types

      - name: Enhance React Native Icons
        run: pnpm enhance-rn

      - name: Clean up generated files
        run: rm -rf packages/*/dist

      - name: Build packages
        run: pnpm build

      - name: Determine New Version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Use node to calculate the new version
          if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
            NEW_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); console.log(\`\${Number(v[0])+1}.0.0\`)");
          elif [ "${{ github.event.inputs.version_type }}" = "minor" ]; then
            NEW_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); console.log(\`\${v[0]}.\${Number(v[1])+1}.0\`)");
          else
            NEW_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); console.log(\`\${v[0]}.\${v[1]}.\${Number(v[2])+1}\`)");
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update Package Versions
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          echo "Updating all packages to version $NEW_VERSION"

          # Update root package.json
          node -e "const pkg=require('./package.json'); pkg.version='$NEW_VERSION'; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n')"

          # Update all package versions in packages directory
          for PKG_DIR in packages/*/; do
            if [ -f "${PKG_DIR}package.json" ]; then
              echo "Updating ${PKG_DIR}package.json to version $NEW_VERSION"
              node -e "const pkg=require('./${PKG_DIR}package.json'); pkg.version='$NEW_VERSION'; if(pkg.dependencies) { Object.keys(pkg.dependencies).forEach(dep => { if(dep.startsWith('@airqo-icons-min/')) { pkg.dependencies[dep]='$NEW_VERSION'; }}); }; if(pkg.peerDependencies) { Object.keys(pkg.peerDependencies).forEach(dep => { if(dep.startsWith('@airqo-icons-min/')) { pkg.peerDependencies[dep]='$NEW_VERSION'; }}); }; fs.writeFileSync('./${PKG_DIR}package.json', JSON.stringify(pkg, null, 2) + '\n')"
            fi
          done

      - name: Update CHANGELOG
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          TODAY=$(date +"%Y-%m-%d")

          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Create entry for new version
          TEMP_FILE=$(mktemp)
          echo "# Changelog" > $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "## v$NEW_VERSION ($TODAY)" >> $TEMP_FILE
          echo "" >> $TEMP_FILE

          if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
            echo "### 💥 Breaking Changes" >> $TEMP_FILE
            echo "" >> $TEMP_FILE
            echo "- Major version upgrade" >> $TEMP_FILE
            echo "" >> $TEMP_FILE
          fi

          echo "### 🚀 Features and Improvements" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "- New release of $NEW_VERSION" >> $TEMP_FILE
          echo "" >> $TEMP_FILE

          # Append existing changelog content
          if [ -f CHANGELOG.md ]; then
            tail -n +3 CHANGELOG.md >> $TEMP_FILE
          fi

          # Replace changelog file
          mv $TEMP_FILE CHANGELOG.md

      - name: Commit Version Updates
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          git add package.json packages/*/package.json CHANGELOG.md
          git commit -m "chore(release): bump version to $NEW_VERSION [skip ci]"

          # Check if tag exists and delete it locally
          if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
            echo "Tag v$NEW_VERSION already exists locally, deleting it"
            git tag -d "v$NEW_VERSION"
          fi

          # Create the new tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

      - name: Validate NPM Token
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Clear any existing npmrc files to avoid conflicts
          rm -f ~/.npmrc

          # Create a fresh npmrc file with the token
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

          echo "🔑 Verifying NPM token..."

          # Verify npm token works by checking authentication status
          if npm whoami; then
            NPM_USER=$(npm whoami)
            echo "✅ NPM token is valid. Authenticated as: $NPM_USER"
              # Check if the user has permission to publish to airqo-icons-min scope
            echo "🔍 Checking permissions for @airqo-icons-min scope..."
            if npm org ls @airqo-icons-min 2>/dev/null | grep -q "$NPM_USER"; then
              echo "✅ User $NPM_USER has access to @airqo-icons-min organization"
            else
              echo "⚠️ Warning: Could not verify if $NPM_USER has access to @airqo-icons-min organization"
              echo "This may be due to permissions or the organization setup"
            fi
          else 
            echo "❌ NPM token is invalid or expired. Please check your NPM_TOKEN secret."
            echo "Make sure the token has publish access to the @airqo-icons-min scope."
            exit 1
          fi

      - name: Publish Packages to NPM
        id: publish
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Clear any existing npmrc files to avoid conflicts
          rm -f ~/.npmrc

          # Create a fresh npmrc file with the token
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

          # Show npm config for debugging (hide secrets)
          npm config list | grep -v _authToken

          # Track if packages published successfully
          PUBLISH_SUCCESS=true
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          FINAL_VERSION="$NEW_VERSION"
          # Flag to track if we had to increment the version due to existing versions
          VERSION_INCREMENTED=false
          
          # Function to check if a version exists on npm
          check_version_exists() {
            local pkg_name="$1"
            local version="$2"
            
            # Use npm view to check if the specific version exists
            if npm view "${pkg_name}@${version}" version &>/dev/null; then
              return 0 # Version exists
            else
              return 1 # Version doesn't exist
            fi
          }
          
          # Function to increment version
          increment_version() {
            local version="$1"
            # Split the version by dots
            IFS='.' read -r -a version_parts <<< "$version"
            
            # Increment the patch version
            local new_patch=$((version_parts[2] + 1))
            echo "${version_parts[0]}.${version_parts[1]}.$new_patch"
          }

          # Simple function to process workspace references
          process_references() {
            local pkg_dir="$1"
            local version="$2"
            
            echo "Processing workspace references in ${pkg_dir}"
            
            # Use Node.js to process the package.json
            node -e "
              const fs = require('fs');
              const pkg = require('./${pkg_dir}/package.json');
              let hasChanges = false;
              
              // Process dependencies
              if (pkg.dependencies) {
                for (const dep in pkg.dependencies) {
                  if (pkg.dependencies[dep].startsWith('workspace:')) {
                    console.log('Replacing workspace: reference for ' + dep);
                    pkg.dependencies[dep] = '${version}';
                    hasChanges = true;
                  }
                }
              }
              
              // Process peerDependencies
              if (pkg.peerDependencies) {
                for (const dep in pkg.peerDependencies) {
                  if (pkg.peerDependencies[dep].startsWith('workspace:')) {
                    console.log('Replacing workspace: reference for ' + dep);
                    pkg.peerDependencies[dep] = '${version}';
                    hasChanges = true;
                  }
                }
              }
              
              if (hasChanges) {
                fs.writeFileSync('./${pkg_dir}/package.json', JSON.stringify(pkg, null, 2) + '\\n');
                console.log('Updated package.json in ${pkg_dir}');
              } else {
                console.log('No workspace references found in ${pkg_dir}');
              }
            "
          }

          # Loop through each package and publish
          for PKG_DIR in packages/core packages/react packages/react-native packages/vue; do
            if [ -f "${PKG_DIR}/package.json" ]; then
              PACKAGE_NAME=$(node -p "require('./${PKG_DIR}/package.json').name")
              
              echo "📦 Processing ${PACKAGE_NAME} in ${PKG_DIR}"
              
              # Process any workspace: references before publishing
              process_references "${PKG_DIR}" "${FINAL_VERSION}"
              
              # Check if this version already exists for this package
              while check_version_exists "$PACKAGE_NAME" "$FINAL_VERSION"; do
                echo "⚠️ Version $FINAL_VERSION already exists for $PACKAGE_NAME, incrementing..."
                FINAL_VERSION=$(increment_version "$FINAL_VERSION")
                VERSION_INCREMENTED=true
                
                # Update the version in package.json
                node -e "const fs = require('fs'); const pkg = require('./${PKG_DIR}/package.json'); pkg.version = '$FINAL_VERSION'; fs.writeFileSync('./${PKG_DIR}/package.json', JSON.stringify(pkg, null, 2) + '\n')"
                echo "New version will be: $FINAL_VERSION"
              done
              
              # If we incremented the version for any package, update all packages to match
              if [ "$VERSION_INCREMENTED" = true ]; then
                # Update root package.json
                echo "Updating root package.json to $FINAL_VERSION"
                node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.version = '$FINAL_VERSION'; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n')"
                
                # Update versions in all packages to keep them aligned
                for UPDATE_PKG_DIR in packages/*/; do
                  if [ -f "${UPDATE_PKG_DIR}package.json" ]; then
                    if [ "${UPDATE_PKG_DIR}" != "${PKG_DIR}" ]; then
                      echo "Updating ${UPDATE_PKG_DIR}package.json to version $FINAL_VERSION"
                      node -e "const fs = require('fs'); const pkg = require('./${UPDATE_PKG_DIR}package.json'); pkg.version = '$FINAL_VERSION'; if(pkg.dependencies) { Object.keys(pkg.dependencies).forEach(dep => { if(dep.startsWith('@airqo-icons-min/')) { pkg.dependencies[dep]='$FINAL_VERSION'; }}); }; if(pkg.peerDependencies) { Object.keys(pkg.peerDependencies).forEach(dep => { if(dep.startsWith('@airqo-icons-min/')) { pkg.peerDependencies[dep]='$FINAL_VERSION'; }}); }; fs.writeFileSync('./${UPDATE_PKG_DIR}package.json', JSON.stringify(pkg, null, 2) + '\n')"
                    fi
                  fi
                done
                
                # Update workspace references again with new version
                process_references "${PKG_DIR}" "${FINAL_VERSION}"
              fi
              
              echo "🚀 Publishing ${PACKAGE_NAME}@${FINAL_VERSION}"
              
              # Try to publish
              if (cd "${PKG_DIR}" && npm publish --access public); then
                echo "✅ Successfully published ${PACKAGE_NAME}@${FINAL_VERSION}"
              else
                echo "❌ Failed to publish ${PACKAGE_NAME}"
                PUBLISH_SUCCESS=false
              fi
            fi
          done

          # If we incremented the version, also update CHANGELOG.md
          if [ "$VERSION_INCREMENTED" = true ]; then
            echo "Updating CHANGELOG.md for new version $FINAL_VERSION"
            TODAY=$(date +"%Y-%m-%d")
            
            # Update the current version header in CHANGELOG.md
            sed -i "s/## v${NEW_VERSION}/## v${FINAL_VERSION}/g" CHANGELOG.md
            
            # Commit the version changes
            git add package.json packages/*/package.json CHANGELOG.md
            git commit -m "chore(release): bump version to $FINAL_VERSION [skip ci]"
            
            # Update or create new tag
            if git tag -l "v$FINAL_VERSION" | grep -q "v$FINAL_VERSION"; then
              git tag -d "v$FINAL_VERSION"
            fi
            git tag -a "v$FINAL_VERSION" -m "Release v$FINAL_VERSION"
          fi

          # Output the final version
          echo "new_version=${FINAL_VERSION}" >> $GITHUB_OUTPUT

          # If any package failed to publish, mark the step as failed
          if [ "$PUBLISH_SUCCESS" = false ]; then
            echo "❌ Some packages failed to publish"
            exit 1
          else
            echo "✅ All packages published successfully with version $FINAL_VERSION"
          fi

      - name: Push changes to GitHub
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          # Get the final version from the publish step
          FINAL_VERSION="${{ steps.publish.outputs.new_version }}"
          
          # If the final version was not set, use the original version
          if [ -z "$FINAL_VERSION" ]; then
            FINAL_VERSION="${{ steps.version.outputs.new_version }}"
          fi
          
          echo "Using version for tags: $FINAL_VERSION"

          if git ls-remote --tags origin | grep -q "refs/tags/v$FINAL_VERSION"; then
            echo "Tag v$FINAL_VERSION already exists remotely, deleting it"
            git push --delete origin "v$FINAL_VERSION" || echo "Could not delete remote tag (it may not exist)"
          fi

          # Push the commits
          git push origin HEAD:${GITHUB_REF#refs/heads/}

          # Push new tags
          git push --tags

      - name: Delete existing GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        id: delete_release
        run: |
          # Use the version from the Publish step which may have been auto-incremented
          if [ -n "${{ steps.publish.outputs.new_version }}" ]; then
            NEW_VERSION="${{ steps.publish.outputs.new_version }}"
          else
            NEW_VERSION="${{ steps.version.outputs.new_version }}"
          fi

          echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Ensure jq is installed
          if ! command -v jq &> /dev/null; then
            echo "Installing jq for JSON processing"
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Check if release exists and delete it using GitHub API
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$NEW_VERSION" | \
            jq -r '.id // empty')

          if [ ! -z "$RELEASE_ID" ]; then
            echo "Deleting existing release with ID $RELEASE_ID"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          else
            echo "No existing release found for tag v$NEW_VERSION"
          fi

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.delete_release.outputs.final_version }}
          tag_name: v${{ steps.delete_release.outputs.final_version }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run in Dry Run Mode
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "DRY RUN Mode - No changes were made"
          echo "Would publish version ${{ steps.version.outputs.new_version }}"

          for PKG_DIR in packages/core packages/react packages/react-native packages/vue; do
            if [ -f "${PKG_DIR}/package.json" ]; then
              echo "Would publish ${PKG_DIR}"
            fi
          done

      # Add release summary
      - name: Release Summary
        run: |
          echo "### Release Summary ✅" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🧪 **DRY RUN** - No actual publishing occurred" >> $GITHUB_STEP_SUMMARY
          else
            # Use the final version (which may have been auto-incremented)
            FINAL_VERSION="${{ steps.version.outputs.new_version }}"
            if [ -n "${{ steps.delete_release.outputs.final_version }}" ]; then
              FINAL_VERSION="${{ steps.delete_release.outputs.final_version }}"
            fi
            
            echo "🚀 Successfully published packages to npm" >> $GITHUB_STEP_SUMMARY
            echo "📦 Published version: v$FINAL_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "🔗 NPM package: https://www.npmjs.com/package/@airqo-icons-min/core" >> $GITHUB_STEP_SUMMARY
            REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
            echo "🏷️ GitHub release: ${REPO_URL}/releases/tag/v$FINAL_VERSION" >> $GITHUB_STEP_SUMMARY
          fi

          echo "📅 Release Date: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "📊 Release Type: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
