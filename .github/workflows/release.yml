name: CI & Release
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Optimize SVGs and Generate Icons
        run: |
          echo "Running SVG optimization..."
          pnpm run optimize
          echo "Generating icons..."
          pnpm run generate
          echo "Verifying generated files..."
          ls -la packages/react-native/src/icons || echo "Icons not generated in react-native"
          ls -la packages/react/src/icons || echo "Icons not generated in react"

      - name: Build Core Package
        run: |
          cd packages/core
          pnpm run build
          
      - name: Build All Packages
        run: pnpm run build
        
      - name: Debug Build Failure (if occurs)
        if: failure()
        run: |
          echo "=== Build failed, showing diagnostic information ==="
          echo "=== Directory structure ==="
          ls -R packages/
          echo "=== Package versions ==="
          pnpm list
          echo "=== Checking for error patterns ==="
          find packages -name "*.log" -exec cat {} \; 2>/dev/null || echo "No log files found"
          echo "=== React Native index.ts ==="
          if [ -f "packages/react-native/src/index.ts" ]; then
            cat packages/react-native/src/index.ts
          fi

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Icons and Build
        run: |
          pnpm run optimize
          pnpm run generate
          pnpm run build

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run Semantic Release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUB_DEV_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}
        run: |
          echo "Running semantic-release with debug logging"
          npx semantic-release --debug

      - name: Debug Publishing (if failure)
        if: failure()
        run: |
          echo "=== Semantic Release failed, showing diagnostic information ==="
          echo "NPM Config:"
          npm config list
          echo "=== Checking NPM user:"
          npm whoami || echo "Not logged in to NPM"

      - name: Setup Flutter SDK for publish
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'

      - name: Publish Flutter package to pub.dev
        if: env.PUB_DEV_TOKEN != ''
        env:
          PUB_DEV_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}
        run: |
          cd packages/flutter
          flutter pub get
          mkdir -p ~/.pub-cache
          echo '{"https://pub.dev":{"token":"'$PUB_DEV_TOKEN'"}}' > ~/.pub-cache/credentials.json
          flutter pub publish --force
